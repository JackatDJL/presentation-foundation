// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_MAIN_STRING")
  directUrl = env("DB_MAIN_DIRECT_STRING")
  schemas   = ["data", "files", "auth"]
}

enum file_types {
  logo
  cover
  presentation
  handout
  research

  @@schema("files")
}

enum visibility_types {
  public
  private

  @@schema("data")
}

enum fileStorage_types {
  utfs
  blob

  @@schema("files")
}

enum fileTransfer_types {
  idle
  queued
  in_progress

  @@schema("files")
}

model files {
  id             String             @id @default(uuid())
  name           String
  fileType       file_types
  dataType       String
  size           Int
  ufsKey         String?            @db.VarChar(48)
  blobPath       String?
  url            String
  storedIn       fileStorage_types  @default(utfs)
  targetStorage  fileStorage_types  @default(blob)
  transferStatus fileTransfer_types @default(idle)
  isLocked       Boolean            @default(false)
  password       String?
  presentationId String
  ownerId        String
  owner          User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  logo           presentations?     @relation(name: "LogoRelation")
  cover          presentations?     @relation(name: "CoverRelation")
  presentation   presentations?     @relation(name: "PresentationRelation")
  handout        presentations?     @relation(name: "HandoutRelation")
  research       presentations?     @relation(name: "ResearchRelation")
  parent         presentations?     @relation(fields: [parentId], references: [id])
  parentId       String?

  @@index([id])
  @@index([presentationId])
  @@index([ownerId])
  @@index([fileType, presentationId])
  @@schema("files")
}

model presentations {
  id             String           @id @default(uuid())
  shortname      String           @unique @db.VarChar(25)
  title          String
  description    String?
  logo           files?           @relation(name: "LogoRelation", fields: [logoId], references: [id])
  logoId         String?          @unique
  cover          files?           @relation(name: "CoverRelation", fields: [coverId], references: [id])
  coverId        String?          @unique
  presentation   files?           @relation(name: "PresentationRelation", fields: [presentationId], references: [id])
  presentationId String?          @unique
  handout        files?           @relation(name: "HandoutRelation", fields: [handoutId], references: [id])
  handoutId      String?          @unique
  research       files?           @relation(name: "ResearchRelation", fields: [researchId], references: [id])
  researchId     String?          @unique
  kahootPin      String?
  kahootId       String?
  credits        String?
  visibility     visibility_types @default(private)
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  files          files[]

  @@index([id])
  @@index([shortname])
  @@index([ownerId])
  @@index([ownerId, visibility])
  @@index([visibility])
  @@index([kahootPin])
  @@index([kahootId])
  @@schema("data")
}

view public_presentations {
  id             String
  shortname      String           @unique
  title          String
  description    String?
  logoId         String?
  coverId        String?
  presentationId String?
  handoutId      String?
  researchId     String?
  kahootPin      String?
  kahootId       String?
  credits        String?
  visibility     visibility_types
  ownerId        String
  createdAt      DateTime
  updatedAt      DateTime

  @@map("public_presentations")
  @@schema("data")
}

view public_files {
  id             String             @unique
  name           String
  fileType       file_types
  dataType       String
  size           Int
  ufsKey         String?
  blobPath       String?
  url            String
  storedIn       fileStorage_types
  targetStorage  fileStorage_types
  transferStatus fileTransfer_types
  isLocked       Boolean
  password       String?
  presentationId String
  ownerId        String
  createdAt      DateTime
  updatedAt      DateTime

  @@map("public_files")
  @@schema("files")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  username                 String?
  displayUsername          String?
  role                     String?
  banned                   Boolean?
  banReason                String?
  banExpires               DateTime?
  tosAccepted              Boolean
  privacyPolicyAccepted    Boolean
  marketingConsentAccepted Boolean
  cookieConsentAccepted    Boolean
  passkeys                 Passkey[]
  members                  Member[]
  invitations              Invitation[]
  files                    files[]
  presentations            presentations[]

  @@unique([email])
  @@unique([username])
  @@map("user")
  @@schema("auth")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
  @@schema("auth")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
  @@schema("auth")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
  @@schema("auth")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?

  @@map("passkey")
  @@schema("auth")
}

model OauthApplication {
  id           String    @id
  name         String?
  icon         String?
  metadata     String?
  clientId     String?
  clientSecret String?
  redirectURLs String?
  type         String?
  disabled     Boolean?
  userId       String?
  createdAt    DateTime?
  updatedAt    DateTime?

  @@unique([clientId])
  @@map("oauthApplication")
  @@schema("auth")
}

model OauthAccessToken {
  id                    String    @id
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  clientId              String?
  userId                String?
  scopes                String?
  createdAt             DateTime?
  updatedAt             DateTime?

  @@unique([accessToken])
  @@unique([refreshToken])
  @@map("oauthAccessToken")
  @@schema("auth")
}

model OauthConsent {
  id           String    @id
  clientId     String?
  userId       String?
  scopes       String?
  createdAt    DateTime?
  updatedAt    DateTime?
  consentGiven Boolean?

  @@map("oauthConsent")
  @@schema("auth")
}

model Organization {
  id          String       @id
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
  @@schema("auth")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
  @@schema("auth")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
  @@schema("auth")
}
